NEW CLIENT ID 0x000
NEW SERVER ID 0x000
NEW SHARED ID 0x000

000 Handshake
001 LoginStart

000 RESERVED (for future responses to Handshake)
001 LoginSuccess
002 VoxelDefEntry
003 VoxelDefFace
004 VoxelDefChecksum
005 ChunkVoxels
006 PlayerInfoEntry
007 PlayerInfoUsername
008 SpawnEntity
009 RemoveEntity
00A SpawnPlayer

000 Disconnect
001 ChatMessage
002 UpdateCreature
003 UpdateHead

1. Server runs indefinitely waiting for new connections (session state 3).
2. When a connection occurs, the server changes session state
to 1 and awaits for a Handshake packet.
3. After LoginSuccess is sent, server changes session state to 2
and sends lots of valuable data required for the client game to work.
4. After SpawnPlayer is broadcast across the server, session state is
changed to 3 (game loop, the initial state),

1. Connection and login:
    C -> S: Handshake(protocol_version)
    C -> S: LoginStart(username)
    S -> C: LoginSuccess(session_id) [switch to 2]

2. Pre-respawn game data:
    S -> C: VoxelDefEntry(voxel, type)
    S -> C: VoxelDefFace(voxel, face, transparent, texture)
    S -> C: VoxelDefChecksum(checksum)
    S -> C: ChunkVoxels(chunkpos, data)
    S -> C: PlayerInfoEntry(session_id)
    S -> C: PlayerInfoUsername(session_id, username)
    S -> *: SpawnEntity(entity_id, type)
    S -> *: UpdateCreature(entity_id, position, yaw) [shared]
    S -> *: UpdateHead(entity_id, angles) [shared]
    S -> C: SpawnPlayer(player entity_id) [switch to 3]

3. Game loop
    C -> S: UpdateCreature(player entity_id, position, yaw) [shared]
    C -> S: UpdateHead(player entity_id, angles) [shared]
    C -> S: UpdateWhatever(whatever entity_id, ...) [shared]
    S -> A: UpdateCreature(player entity_id, position, yaw) [shared]
    S -> A: UpdateHead(player entity_id, angles) [shared]
    S -> A: UpdateWhatever(whatever entity_id, ...) [shared]
